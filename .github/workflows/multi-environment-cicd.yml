name: 3MTT Chatbot Multi-Environment CI/CD

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]
  workflow_dispatch:  # Allow manual triggers

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Continuous Integration
  ci:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-production.txt
    
    - name: Code formatting check
      run: |
        black --check app.py
    
    - name: Lint with flake8
      run: |
        flake8 app.py --max-line-length=100 --ignore=E203,W503
    
    - name: Security scan with bandit
      run: |
        bandit -r app.py -f json -o bandit-report.json
        bandit -r app.py
    
    - name: Dependency security check
      run: |
        safety check
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ --cov=app --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Build Docker image
  build:
    needs: ci
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=sha,prefix={{branch}}-
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Development
  deploy-dev:
    needs: [ci, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/feature/')
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
        aws-region: us-east-1
    
    - name: Deploy to Development
      run: |
        chmod +x scripts/deploy-dev.sh
        export BUILD_NUMBER=${{ github.run_number }}
        export IMAGE_TAG=${{ needs.build.outputs.image-tag }}
        ./scripts/deploy-dev.sh
    
    - name: Run integration tests
      run: |
        sleep 60  # Wait for deployment
        pytest tests/integration/ --base-url=https://dev.3mtt-chatbot.com -v
    
    - name: Comment PR with dev deployment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'ðŸš€ Deployed to development environment: https://dev.3mtt-chatbot.com'
          })

  # Deploy to Staging
  deploy-staging:
    needs: [ci, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
        aws-region: us-east-1
    
    - name: Deploy to Staging
      run: |
        chmod +x scripts/deploy-staging.sh
        export BUILD_NUMBER=${{ github.run_number }}
        export IMAGE_TAG=${{ needs.build.outputs.image-tag }}
        ./scripts/deploy-staging.sh
    
    - name: Run comprehensive tests
      run: |
        sleep 120  # Wait for deployment
        pytest tests/integration/ --base-url=https://staging.3mtt-chatbot.com -v
        pytest tests/performance/ --base-url=https://staging.3mtt-chatbot.com -v
    
    - name: Security scan on staging
      run: |
        # Run OWASP ZAP or similar security scan
        docker run -t owasp/zap2docker-stable zap-baseline.py \
          -t https://staging.3mtt-chatbot.com || true
    
    - name: Notify team of staging deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#staging-deployments'
        text: 'ðŸš€ 3MTT Chatbot deployed to staging - Build ${{ github.run_number }}'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Deploy to Production
  deploy-production:
    needs: [ci, build, deploy-staging]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: us-east-1
    
    - name: Manual approval
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ github.TOKEN }}
        approvers: devops-team,product-owner
        minimum-approvals: 2
        issue-title: "Production Deployment Approval - Build ${{ github.run_number }}"
        issue-body: |
          Please review and approve the production deployment:
          
          **Build Number:** ${{ github.run_number }}
          **Release:** ${{ github.event.release.tag_name }}
          **Changes:** ${{ github.event.release.body }}
          
          **Pre-deployment Checklist:**
          - [ ] Staging tests passed
          - [ ] Security scan clean
          - [ ] Performance tests passed
          - [ ] Database migrations reviewed
          - [ ] Rollback plan confirmed
    
    - name: Deploy to Production
      run: |
        chmod +x scripts/deploy-production.sh
        export BUILD_NUMBER=${{ github.run_number }}
        export IMAGE_TAG=${{ needs.build.outputs.image-tag }}
        export SKIP_APPROVAL=true  # Already approved above
        ./scripts/deploy-production.sh
    
    - name: Post-deployment validation
      run: |
        sleep 180  # Wait for deployment
        pytest tests/smoke/ --base-url=https://chatbot.3mtt.gov.ng -v
    
    - name: Create deployment record
      run: |
        echo "Creating deployment record..."
        # Update deployment tracking system
    
    - name: Notify stakeholders
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#production-deployments'
        text: |
          ðŸŽ‰ 3MTT Chatbot successfully deployed to production!
          
          **Build:** ${{ github.run_number }}
          **Release:** ${{ github.event.release.tag_name }}
          **URL:** https://chatbot.3mtt.gov.ng
          **Deployed by:** ${{ github.actor }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: success()
    
    - name: Rollback on failure
      if: failure()
      run: |
        echo "Deployment failed, initiating rollback..."
        chmod +x scripts/rollback-production.sh
        ./scripts/rollback-production.sh
    
    - name: Notify on failure
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#production-alerts'
        text: |
          ðŸš¨ PRODUCTION DEPLOYMENT FAILED!
          
          **Build:** ${{ github.run_number }}
          **Release:** ${{ github.event.release.tag_name }}
          **Action:** Automatic rollback initiated
          **Incident:** Please investigate immediately
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: failure()

  # Cleanup
  cleanup:
    needs: [deploy-dev, deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Cleanup old images
      run: |
        echo "Cleaning up old container images..."
        # Implement cleanup logic for old images
    
    - name: Update deployment dashboard
      run: |
        echo "Updating deployment dashboard..."
        # Update internal deployment tracking