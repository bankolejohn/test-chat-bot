name: 3MTT Chatbot CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-production.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black flake8 bandit safety pytest pytest-cov
    
    - name: Format code with Black
      run: |
        black app.py config.py models.py auth.py monitoring.py
    
    - name: Lint with flake8
      run: |
        flake8 app.py config.py models.py auth.py monitoring.py --max-line-length=88 --extend-ignore=E203,W503,E501,F401,F841,W293
    
    - name: Security scan with bandit
      run: |
        bandit -r app.py config.py models.py auth.py monitoring.py -s B104
    
    - name: Check for known security vulnerabilities
      run: |
        safety check
    
    - name: Run tests with coverage
      run: |
        pytest tests/ --cov=app --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Build Docker image
      run: |
        docker build -t 3mtt-chatbot:${{ github.sha }} .
        docker tag 3mtt-chatbot:${{ github.sha }} 3mtt-chatbot:latest
    
    - name: Run container security scan
      run: |
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          -v $HOME/Library/Caches:/root/.cache/ \
          aquasec/trivy:latest image 3mtt-chatbot:latest
    
    - name: Deploy to AWS Elastic Beanstalk
      run: |
        # Create deployment package
        zip -r deploy.zip . -x "*.git*" "tests/*" "*.md" "node_modules/*"
        
        # Deploy to Elastic Beanstalk
        aws elasticbeanstalk create-application-version \
          --application-name 3mtt-chatbot \
          --version-label ${{ github.sha }} \
          --source-bundle S3Bucket=${{ secrets.S3_BUCKET }},S3Key=deploy.zip
        
        aws elasticbeanstalk update-environment \
          --application-name 3mtt-chatbot \
          --environment-name production \
          --version-label ${{ github.sha }}
    
    - name: Health check
      run: |
        sleep 60  # Wait for deployment
        curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  performance-test:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install k6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: Run performance tests
      run: |
        k6 run --vus 10 --duration 30s performance-test.js
      env:
        API_URL: ${{ secrets.PRODUCTION_URL }}